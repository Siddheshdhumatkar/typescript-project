services:
  web:
    dockerfile: ../Dockerfile.dev
    target: dist
    numReplicas: 1
    depends_on:
      - postgres
      - redis
    ports:
      - 3000:3000
      - 4200:4200
      - 5000:5000
    env:
      - key: NODE_ENV
        value: production
      - key: NEXT_PUBLIC_API_URL
        value: /api
      - key: DATABASE_URL
        fromService:
          type: postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          property: connectionString
      - key: JWT_SECRET
        generate: secret
      - key: SKIP_CONFIG_CHECK
        value: "true"
    volumes:
      - name: uploads
        path: /uploads
      - name: config
        path: /config

  postgres:
    image: postgres:17-alpine
    provision: true
    env:
      - key: POSTGRES_USER
        value: postiz
      - key: POSTGRES_PASSWORD
        generate: password
      - key: POSTGRES_DB
        value: postiz
    volumes:
      - name: postgres-data
        path: /var/lib/postgresql/data
        persistent: true
    healthcheck:
      command: pg_isready -U postiz
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    provision: true
    healthcheck:
      command: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
    persistent: true
  uploads:
    mountPath: /uploads
    persistent: true
  config:
    mountPath: /config
    persistent: true

scripts:
  predeploy: |
    npm ci --production=false
    npm run update-plugins
    npm run prisma-generate
    npm run prisma-db-push
    
  railway:start: |
    npm run railway:deploy